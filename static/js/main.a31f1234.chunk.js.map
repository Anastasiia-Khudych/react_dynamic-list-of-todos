{"version":3,"sources":["types/Status.ts","components/TodoList/TodoList.tsx","components/TodoFilter/TodoFilter.tsx","components/Loader/Loader.tsx","api.ts","components/TodoModal/TodoModal.tsx","App.tsx","utils/functions.tsx","index.tsx"],"names":["Status","TodoList","todos","onShowButtonClick","selectedTodoId","className","map","todo","id","completed","title","isTodoSelected","classNames","type","onClick","TodoFilter","status","onStatusChange","query","onInputChange","value","onChange","event","target","ALL","ACTIVE","COMPLETED","placeholder","style","pointerEvents","length","Loader","get","url","delay","fullURL","Promise","resolve","setTimeout","then","fetch","res","json","TodoModal","selectedTodo","oncloseButtonClick","useState","user","setUser","hasLoadingError","setHasLoadingError","loadUserFromServer","currentTodo","a","userId","userFromServer","useEffect","isLoadingFinished","href","name","App","setTodos","setSelectedTodoId","selectedStatus","setSelectedStatus","setQuery","loadTodosFromServer","todosFromServer","shownTodo","todoId","find","findTodo","visibleTodos","filteredTodos","filter","normalizedQuery","toLowerCase","includes","filterTodos","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.a31f1234.chunk.js","sourcesContent":["export enum Status {\n  ALL = 'all',\n  ACTIVE = 'active',\n  COMPLETED = 'completed',\n}\n","import classNames from 'classnames';\nimport React from 'react';\nimport { Todo } from '../../types/Todo';\n\ntype Props = {\n  todos: Todo[],\n  onShowButtonClick: (userId: number) => void;\n  selectedTodoId: number,\n};\n\nexport const TodoList: React.FC<Props> = ({\n  todos,\n  onShowButtonClick,\n  selectedTodoId,\n}) => {\n  const showModal = (userId: number) => {\n    onShowButtonClick(userId);\n  };\n\n  return (\n    <table className=\"table is-narrow is-fullwidth\">\n      <thead>\n        <tr>\n          <th>#</th>\n          <th>\n            <span className=\"icon\">\n              <i className=\"fas fa-check\" />\n            </span>\n          </th>\n          <th>Title</th>\n          <th> </th>\n        </tr>\n      </thead>\n\n      <tbody>\n        {todos.map(todo => {\n          const { id, completed, title } = todo;\n          const isTodoSelected = selectedTodoId === id;\n\n          return (\n            <tr\n              data-cy=\"todo\"\n              className={classNames({\n                'has-background-info-light': isTodoSelected,\n              })}\n              key={id}\n            >\n              <td className=\"is-vcentered\">\n                {id}\n              </td>\n              <td className=\"is-vcentered\">\n                {completed && (\n                  <span className=\"icon\" data-cy=\"iconCompleted\">\n                    <i className=\"fas fa-check\" />\n                  </span>\n                )}\n              </td>\n              <td className=\"is-vcentered is-expanded\">\n                <p className={classNames({\n                  'has-text-success': completed,\n                  'has-text-danger': !completed,\n                })}\n                >\n                  {title}\n                </p>\n              </td>\n              <td className=\"has-text-right is-vcentered\">\n                <button\n                  data-cy=\"selectButton\"\n                  className=\"button\"\n                  type=\"button\"\n                  onClick={() => showModal(id)}\n                >\n                  <span className=\"icon\">\n                    <i className={classNames(\n                      'far',\n                      {\n                        'fa-eye-slash': isTodoSelected,\n                        'fa-eye': !isTodoSelected,\n                      },\n                    )}\n                    />\n                  </span>\n                </button>\n              </td>\n            </tr>\n          );\n        })}\n      </tbody>\n    </table>\n  );\n};\n","import React, { ChangeEvent } from 'react';\nimport { Status } from '../../types/Status';\n\ntype Props = {\n  status: string;\n  onStatusChange: (value: Status) => void;\n  query: string;\n  onInputChange: (value: string) => void;\n};\n\nexport const TodoFilter: React.FC<Props> = (\n  {\n    status,\n    onStatusChange,\n    query,\n    onInputChange,\n  },\n) => {\n  const changeStatus = (event: ChangeEvent<HTMLSelectElement>) => {\n    const { value } = event.target;\n\n    onStatusChange(value as Status);\n  };\n\n  const setSearchString = (event: ChangeEvent<HTMLInputElement>) => {\n    const { value } = event.target;\n\n    onInputChange(value);\n  };\n\n  return (\n    <form className=\"field has-addons\">\n      <p className=\"control\">\n        <span className=\"select\">\n          <select\n            data-cy=\"statusSelect\"\n            value={status}\n            onChange={changeStatus}\n          >\n            <option value={Status.ALL}>All</option>\n            <option value={Status.ACTIVE}>Active</option>\n            <option value={Status.COMPLETED}>Completed</option>\n          </select>\n        </span>\n      </p>\n\n      <p className=\"control is-expanded has-icons-left has-icons-right\">\n        <input\n          data-cy=\"searchInput\"\n          type=\"text\"\n          className=\"input\"\n          placeholder=\"Search...\"\n          value={query}\n          onChange={setSearchString}\n        />\n        <span className=\"icon is-left\">\n          <i className=\"fas fa-magnifying-glass\" />\n        </span>\n\n        <span className=\"icon is-right\" style={{ pointerEvents: 'all' }}>\n          {/* eslint-disable-next-line jsx-a11y/control-has-associated-label */}\n          {query.length > 0 && (\n            // eslint-disable-next-line jsx-a11y/control-has-associated-label\n            <button\n              data-cy=\"clearSearchButton\"\n              type=\"button\"\n              className=\"delete\"\n              onClick={() => onInputChange('')}\n            />\n          )}\n        </span>\n      </p>\n    </form>\n  );\n};\n","import React from 'react';\nimport './Loader.scss';\n\nexport const Loader: React.FC = () => (\n  <div className=\"Loader\" data-cy=\"loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import { Todo } from './types/Todo';\nimport { User } from './types/User';\n\n// eslint-disable-next-line max-len\nconst BASE_URL = 'https://mate-academy.github.io/react_dynamic-list-of-todos/api';\n\n// This function creates a promime\n// that is resolved after a given delay\nfunction wait(delay: number): Promise<void> {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\nfunction get<T>(url: string): Promise<T> {\n  // eslint-disable-next-line prefer-template\n  const fullURL = BASE_URL + url + '.json';\n\n  // we add some delay to see now the laoder works\n  return wait(300)\n    .then(() => fetch(fullURL))\n    .then(res => res.json());\n}\n\nexport const getTodos = () => get<Todo[]>('/todos');\n\nexport const getUser = (userId: number) => get<User>(`/users/${userId}`);\n","import React, { useEffect, useState } from 'react';\nimport { Loader } from '../Loader';\nimport { Todo } from '../../types/Todo';\nimport { User } from '../../types/User';\nimport { getUser } from '../../api';\n\ntype Props = {\n  selectedTodo: Todo;\n  oncloseButtonClick: (value: number) => void;\n};\n\nexport const TodoModal: React.FC<Props> = ({\n  selectedTodo,\n  oncloseButtonClick,\n}) => {\n  const [user, setUser] = useState<User | null>(null);\n  const [hasLoadingError, setHasLoadingError] = useState(false);\n\n  const hideModal = () => {\n    oncloseButtonClick(0);\n  };\n\n  const loadUserFromServer = async (currentTodo: Todo | null) => {\n    try {\n      if (currentTodo) {\n        const userFromServer = await getUser(currentTodo.userId);\n\n        setUser(userFromServer);\n        setHasLoadingError(false);\n      }\n    } catch {\n      setHasLoadingError(true);\n    }\n  };\n\n  useEffect(() => {\n    loadUserFromServer(selectedTodo);\n  }, []);\n\n  const isLoadingFinished = (hasLoadingError && user === null) || user;\n\n  const { id, title, completed } = selectedTodo;\n\n  return (\n    <div className=\"modal is-active\" data-cy=\"modal\">\n      <div className=\"modal-background\" />\n      {!isLoadingFinished ? (\n        <Loader />\n      ) : (\n        <div className=\"modal-card\">\n          <header className=\"modal-card-head\">\n            <div\n              className=\"modal-card-title has-text-weight-medium\"\n              data-cy=\"modal-header\"\n            >\n              {`Todo #${id}`}\n            </div>\n\n            {/* eslint-disable-next-line jsx-a11y/control-has-associated-label */}\n            <button\n              type=\"button\"\n              className=\"delete\"\n              data-cy=\"modal-close\"\n              onClick={() => hideModal()}\n            />\n          </header>\n\n          <div className=\"modal-card-body\">\n            <p className=\"block\" data-cy=\"modal-title\">\n              {title}\n            </p>\n\n            <p className=\"block\" data-cy=\"modal-user\">\n              {hasLoadingError ? (\n                <p className=\"has-text-danger\">\n                  Can&apos;t load user data from server\n                </p>\n              )\n                : (\n                  <>\n                    {completed\n                      ? (\n                        <strong className=\"has-text-success\">Done</strong>\n                      )\n                      : (\n                        <strong className=\"has-text-danger\">Planned</strong>\n                      )}\n\n                    {' by '}\n\n                    {user ? (\n                      <a href=\"mailto:Sincere@april.biz\">\n                        {user.name}\n                      </a>\n                    )\n                      : (\n                        <span className=\"has-text-danger\">\n                          User not found\n                        </span>\n                      )}\n                  </>\n                )}\n            </p>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n","/* eslint-disable max-len */\nimport React, { useEffect, useState } from 'react';\nimport 'bulma/css/bulma.css';\nimport '@fortawesome/fontawesome-free/css/all.css';\n\nimport { TodoList } from './components/TodoList';\nimport { TodoFilter } from './components/TodoFilter';\nimport { TodoModal } from './components/TodoModal';\nimport { Loader } from './components/Loader';\nimport { Todo } from './types/Todo';\nimport { getTodos } from './api';\nimport { filterTodos, findTodo } from './utils/functions';\nimport { Status } from './types/Status';\n\nexport const App: React.FC = () => {\n  const [todos, setTodos] = useState<Todo[]>([]);\n  const [selectedTodoId, setSelectedTodoId] = useState(0);\n  const [hasLoadingError, setHasLoadingError] = useState(false);\n  const [selectedStatus, setSelectedStatus] = useState<Status>(Status.ALL);\n  const [query, setQuery] = useState('');\n\n  const loadTodosFromServer = async () => {\n    try {\n      const todosFromServer = await getTodos();\n\n      setTodos(todosFromServer);\n      setHasLoadingError(false);\n    } catch {\n      setHasLoadingError(true);\n    }\n  };\n\n  useEffect(() => {\n    loadTodosFromServer();\n  }, []);\n\n  const shownTodo = findTodo(todos, selectedTodoId);\n\n  const visibleTodos = filterTodos(todos, selectedStatus, query);\n\n  const isLoadingFinished = (hasLoadingError && todos.length === 0) || todos.length;\n\n  return (\n    <>\n      <div className=\"section\">\n        <div className=\"container\">\n          <div className=\"box\">\n            <h1 className=\"title\">Todos:</h1>\n\n            <div className=\"block\">\n              <TodoFilter\n                status={selectedStatus}\n                onStatusChange={setSelectedStatus}\n                query={query}\n                onInputChange={setQuery}\n              />\n            </div>\n\n            <div className=\"block\">\n              {isLoadingFinished\n                ? (\n                  <TodoList\n                    todos={visibleTodos}\n                    onShowButtonClick={setSelectedTodoId}\n                    selectedTodoId={selectedTodoId}\n                  />\n                )\n                : (\n                  <Loader />\n                )}\n\n              {hasLoadingError && (\n                <p className=\"has-text-danger\">\n                  Can&apos;t load data from server\n                </p>\n              )}\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {selectedTodoId !== 0 && (\n        <TodoModal\n          // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n          selectedTodo={shownTodo!}\n          oncloseButtonClick={setSelectedTodoId}\n        />\n      )}\n    </>\n  );\n};\n","import { Todo } from '../types/Todo';\n\nexport const filterTodos = (\n  todos: Todo[], selectedStatus: string, query: string,\n) => {\n  let filteredTodos = todos.filter(todo => {\n    switch (selectedStatus) {\n      case 'active':\n        return todo.completed === false;\n      case 'completed':\n        return todo.completed === true;\n      case 'all':\n      default:\n        return true;\n    }\n  });\n\n  if (query) {\n    const normalizedQuery = query.toLowerCase();\n\n    filteredTodos = filteredTodos\n      .filter(todo => todo.title.toLowerCase().includes(normalizedQuery));\n  }\n\n  return filteredTodos;\n};\n\nexport const findTodo = (todos: Todo[], todoId: number) => {\n  return todos.find(todo => todo.id === todoId);\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}